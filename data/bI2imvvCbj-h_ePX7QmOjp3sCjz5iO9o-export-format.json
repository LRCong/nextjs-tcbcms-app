[{"_id":"17453ede60782a3701c7b49b532d0313","anthor":"17453ede607828aa01c75436643e4722","content":"聚合是云开发 CloudBase 数据库中非常重要的一种数据批处理操作方式。聚合操作可以将数据分组（或者不分组，即只有一组/每个记录都是一组），然后对每组数据执行多种批处理操作，最后返回结果。\n\n有了聚合能力，可以方便的解决很多没有聚合能力时无法实现或只能低效实现的场景，包括分组查询、只取某些字段的统计值或变换值返回、流水线式分阶段批处理、获取唯一值（去重）等。\n\n本文就以一个简单的实例解释如何在云数据库中，实现十分常用的**联表+聚合查询** 操作。\n\n### 场景说明\n\n假设数据库内存在两个集合：`class` 与 `student`，存在以下数据：\n\n**class（班级信息）：**\n\n![图片](https://main.qcloudimg.com/raw/6df51aadf4192fec860c529e72acf8e0.png)\n\n**student（学生信息）：**\n\n![图片](https://main.qcloudimg.com/raw/4d511ab459a5264b439f08e146032481.png)\n\n现在需要查询徐老师所带的班级里面所有学生的平均成绩。\n\n## 代码示例\n\n### 1、lookup 联表查询\n\n首先我们需要把 student 内的所有数据，按照 class_id 进行分组，这里我们使用云数据库的 lookup 操作符：\n\n```\nlookup({\nfrom: \"student\", //要关联的表student\nlocalField: \"id\", //class表中的关联字段\nforeignField: \"class_id\", //student表中关联字段\nas: \"stu\" //定义输出数组的别名\n}).end();\n```\n\n这个语句会查出来下面的结果，会查出班级的信息以及该班级所对应的所有学生的信息：\n\n```\n{\"list\":\n[{\n\"id\":1,\n\"teacher\":\"王老师\",\n\"cname\":\"一班\",\n\"stu\":[\n{\n\"sname\":\"宁一\",\n\"class_id\":1,\n\"score\":90\n}\n]\n},\n{\n\"id\":2,\n\"teacher\":\"徐老师\",\n\"cname\":\"二班\",\n\"stu\":[\n{\n\"class_id\":2,\n\"sname\":\"张二\",\n\"score\":100\n},\n{\n\"class_id\":2,\n\"sname\":\"李二\",\n\"score\":80\n}\n]\n}]\n}\n```\n\n但是我们只需要徐老师所在班级学生的数据，所以需要进一步过滤。\n\n### 2、match 条件匹配\n\n现在就只是返回徐老师所在班级的学生数据了，学生数据在 stu 对应的数组里面：\n\n```\n.lookup({\nfrom: 'student',\nlocalField: 'id',\nforeignField: 'class_id',\nas: 'stu'\n})\n.match({\nteacher:\"徐老师\"\n})\n.end()\n```\n\n现在就只是返回徐老师所在班级的学生数据了，学生数据在 stu 对应的数组里面：\n\n```\n{\n\"list\": [\n{\n\"_id\": \"5e847ab25eb9428600a512352fa6c7c4\",\n\"id\": 2,\n\"teacher\": \"徐老师\",\n\"cname\": \"二班\",\n//学生数据\n\"stu\": [\n{ \"_id\": \"37e26adb5eb945a70084351e57f6d717\", \"class_id\": 2, \"sname\": \"张二\", \"score\": 100 },\n{ \"_id\": \"5e847ab25eb945cf00a5884204297ed8\", \"class_id\": 2, \"sname\": \"李二\", \"score\": 80 }\n]\n}\n]\n}\n```\n\n接下来我们继续优化代码，直接返回学生的平均分数。\n\n### 3、直接返回学生成绩平均值\n\n如果想要在被连接的表格中（本课程中的 student）做聚合操作，就用 pipeline 方法：\n\n```\n.lookup({\nfrom: 'student',\npipeline: $.pipeline()\n.group({\n_id: null,\nscore: $.avg('$score')\n})\n.done(),\nas: 'stu'\n})\n.match({\nteacher:\"徐老师\"\n})\n.end()\n```\n\n现在输出的数据是这样的：\n\n```\n{\n\"list\": [\n{\n\"_id\": \"5e847ab25eb9428600a512352fa6c7c4\",\n\"id\": 2,\n\"teacher\": \"徐老师\",\n\"cname\": \"二班\",\n\"stu\": [{ \"_id\": null, \"score\": 90 }]\n}\n]\n}\n```\n\n但是现在输出的数据有点复杂，如果只想显示 teacher 和 score 这两个值，我们再进行下面的操作。\n\n### 4. 只显示 teacher 和 score 这两个值\n\n我们使用 replaceRoot、mergeObjects 和 project 进行最后的处理：\n\n```\n.lookup({\nfrom: 'student',\npipeline: $.pipeline()\n.group({\n_id: null,\nscore: $.avg('$score')\n})\n.done(),\nas: 'stu'\n})\n.match({\nteacher:\"徐老师\"\n})\n.replaceRoot({\nnewRoot: $.mergeObjects([$.arrayElemAt(['$stu', 0]), '$$ROOT'])\n})\n.project({\n_id:0,\nteacher:1,\nscore:1\n})\n.end()\n```\n\n现在输出的数据是这样的：\n\n```\n{ \"list\": [{ \"score\": 90, \"teacher\": \"徐老师\" }] }\n```\n\n相关文档：云开发聚合搜索：[https://docs.cloudbase.net/database/aggregate.html](https://docs.cloudbase.net/database/aggregate.html)\n\n## 产品介绍\n\n云开发（Tencent CloudBase，TCB）是腾讯云提供的云原生一体化开发环境和工具平台，为开发者提供高可用、自动弹性扩缩的后端云服务，包含计算、存储、托管等 serverless 化能力，可用于云端一体化开发多种端应用（小程序，公众号，Web 应用，Flutter 客户端等），帮助开发者统一构建和管理后端服务和云资源，避免了应用开发过程中繁琐的服务器搭建及运维，开发者可以专注于业务逻辑的实现，开发门槛更低，效率更高。\n开通云开发：[https://console.cloud.tencent.com/tcb?tdl_anchor=techsite](https://console.cloud.tencent.com/tcb?tdl_anchor=tcbnet&tdl_site=community)\n产品文档：[https://cloud.tencent.com/product/tcb?from=12763](https://cloud.tencent.com/product/tcb?from=12763)\n技术文档：[https://cloudbase.net?from=10004](https://cloudbase.net/?from=10004)\n技术交流加 Q 群：601134960\n最新资讯关注微信公众号【腾讯云云开发】\n\n","image":"cloud://hello-tcb-9glo12vd5bd3bd0d.6865-hello-tcb-9glo12vd5bd3bd0d-1305059170/cloudbase-cms/upload/2021-04-15/vp9y0axb4sasp0209r3hpqrs2kexb0mr_.png","title":"最佳实践丨云数据库实现联表+聚合查询","_createTime":1618487863411,"_updateTime":1618577086825,"author":"17453ede607828aa01c75436643e4722"},{"_id":"cbddf0af607985c401c0d2110cdd62ed","author":"17453ede607828aa01c75436643e4722","content":"使用数据库 `API` 提供的 `where` 方法我们可以构造复杂的查询条件完成复杂的查询任务。\n\n## 查询指令\n\n假设我们需要查询进度大于 30% 的待办事项，那么传入对象表示全等匹配的方式就无法满足了，这时就需要用到查询指令。数据库 `API` 提供了大于、小于等多种查询指令，这些指令都暴露在 `db.command` 对象上。例如查询进度大于 30% 的待办事项：\n\n```javascript\nconst cloudbase = require(\"@cloudbase/js-sdk\");\n\nconst app = cloudbase.init({\n  env: \"xxxx\"\n});\n// 1. 获取数据库引用\nvar db = app.database();\n\nconst _ = db.command;\ndb.collection(\"todos\")\n  .where({\n    // gt 方法用于指定一个 \"大于\" 条件，此处 _.gt(30) 是一个 \"大于 30\" 的条件\n    progress: _.gt(30)\n  })\n  .get()\n  .then((res) => {\n    console.log(res.data);\n  });\n```\n\nAPI 提供了一些查询指令。\n\n具体的查询指令 `API` 文档可参考各 SDK API 参考。\n\n## 逻辑指令\n\n除了指定一个字段满足一个条件之外，我们还可以通过指定一个字段需同时满足多个条件，例如我们 **查询进度小于或等于 50%** 或 **颜色为白色或黄色** 的待办事项：\n\n```javascript\nconst cloudbase = require(\"@cloudbase/js-sdk\");\n\nconst app = cloudbase.init({\n  env: \"xxxx\"\n});\n// 1. 获取数据库引用\nvar db = app.database();\n\nconst _ = db.command;\ndb.collection(\"todos\")\n  .where(\n    _.or([\n      {\n        progress: _.lte(50)\n      },\n      {\n        style: {\n          color: _.in([\"white\", \"yellow\"])\n        }\n      }\n    ])\n  )\n  .get()\n  .then((res) => {\n    console.log(res.data);\n  });\n```\n\n具体的查询指令 `API` 文档可参考各 SDK API 参考。\n\n","image":"cloud://hello-tcb-9glo12vd5bd3bd0d.6865-hello-tcb-9glo12vd5bd3bd0d-1305059170/cloudbase-cms/upload/2021-04-16/vm1qi6069rlmdabg6i9mrfvw2foou8ln_.png","title":"用 @CloudBase/js-sdk 查询数据库","_createTime":1618576836823,"_updateTime":1618823698526}]